//1. Using STL Array gets and sets a reference to an element based on a given index.
#include<iostream >
#include<array>
using namespace std;


int main()
{
    array<int ,5> value;

    cout<<"Enter array element "<<endl;

    for(int i=0;i<5;i++)
    {
    cin>>value[i];
    }

    cout<<"Element at index 0:"<<value[0]<<endl;
    cout<<"Element at index 1:"<<value[1]<<endl;
    cout<<"Element at index 2:"<<value[2]<<endl;
    cout<<"Element at index 3:"<<value[3]<<endl;
    cout<<"Element at index 4:"<<value[4]<<endl;


    cout<<"Before updating Array's values is "<<endl;
    for(int i: value)
    {
        cout<<i<<endl;
    }
    value[4]=300;
    value[2]=500;

    cout<<"After updating Array's values is "<<endl;
    for(int i: value)
    {
        cout<<i<<endl;
    }

//////////////////////////////////////////////////////////////////////////////////////////////////
//2. Using STL Array returns the total number of elements in the array.
#include<iostream>
#include<array>
#include<math.h>
using namespace std;

int main()
{
    int c=0;
array<int,10> arr={1,2,3,4,5,6,7,8,9};

array<int,10>::iterator x;

cout<<"size of array is "<<arr.size()<<endl;


cout<<"capacity of array is "<<sizeof(arr)<<endl;

for(auto x=arr.begin() ; x!=arr.end( )  ;x++)
{
    c++;
}

cout<<"length of array is : "<<c;
return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
// 3. Find the first and last element using the STL array.
#include<iostream>
#include<array>

using namespace std;

int main()
{
array<int ,7> arr={1,3,4,5,6,2,9};

cout<<"first element in array is "<<arr.front()<<endl;
cout<<"last element is array is "<<arr.back()<<endl;

//second approach is

cout<<"first element in array is "<<arr[0]<<endl;
cout<<"last element is array is "<<arr[arr.size()-1]<<endl;
return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////
//4. Returns the element from the given index using the STL array.
#include<iostream>
#include<array>
using namespace std;

int main()
{
    array<int ,7> arr={1,3,4,5,6,2,9};

    //Element at 3 index first approach
    cout<<arr[3-1]<<endl;

    //second approach is
    cout<<arr.at(2)<<endl;

    //third approach is
    //get<key>(object);
    cout<<get<2>(arr);
        return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////
//5. C++ STL program to demonstrate example of array::rbegin() and array::rend()functions

#include<iostream>
#include<array>

using namespace std;

int main()
{
    array<string, 5> arr;

    cout<<"Enter string's "<<endl;
    for(int i=0;i<5;i++)
    {
        cin>>arr[i];
    }
    array<string,5>::iterator it;

    for(auto it=arr.rbegin(); it!=arr.rend();it++)
    {
        cout<<*it<<endl;
    }
///////////////////////////////////////////////
    array<int , 5> arr1;

    cout<<"Enter string's "<<endl;
    for(int i=0;i<5;i++)
    {
        cin>>arr1[i];
    }
    array<int ,5>::iterator i;

    for(auto i=arr1.rbegin(); i!=arr1.rend();i++)
    {
        cout<<*i<<endl;
    }



return 0;

}
/////////////////////////////////////////////////////////////////////////////////////
//6. Using STL to check whether an array is empty or not.
#include<iostream>
#include<array>
using namespace std;

int main()
{
    array<int,0> arr1{};
    array<int,1> arr2{};
    array<int,2> arr3{10,20};
    array<int,3> arr4{10,20,30};
    array<int,4> arr5{45};


    cout<<"first array  :"<<arr1.empty()<<endl;
    cout<<"second array :"<<arr2.empty()<<endl;
    cout<<"third array  :"<<arr3.empty()<<endl;
    cout<<"fourth array :"<<arr4.empty()<<endl;
    cout<<"fifth array  :"<<arr5.empty()<<endl;


}
////////////////////////////////////////////////////////////////////////////////////////
//7. Sort an array in ascending order using sort() function in C++ STL
#include<iostream>
#include<algorithm>
using namespace std;

int main()
{


  int arr[11]={1,2,3,4,5,6,7,8,9,0};

    int s=sizeof(arr)/sizeof(int);

    sort(arr,arr+s);

    for(int i=1;i<s;i++)
    {
        cout<<arr[i];
    }
    return 0;
}

///////////////////////////////////////////////////////////////////////////////////////
//8. Sort an array in descending order using sort() function in C++ STL
#include<iostream>
#include<algorithm>
using namespace std;

int main()
{


  int arr[11]={1,2,3,4,5,6,7,8,9,0};

    int s=sizeof(arr)/sizeof(int);

    sort(arr,arr+s,greater<>());

    for(int i=0;i<s-1;i++)
    {
        cout<<arr[i];
    }
    return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////
//9. C++ program to find the integers which come an odd number of times in an array using C++ STL.
#include<bits/stdc++.h>
using namespace std ;


int intodd(array<int,7> arr)
{
    int result=0;
    for(int i=0;i<arr.size();i++)
    {
        result=result^arr.at(i);
    }
return result;
}
int main()
{
    array<int,7> arr={1,2,7,2,1,5,5};

    int result=intodd(arr);

    cout<<result;
    return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
