1. Define a function to input variable length string and store it in an array without
    memory wastage.
#include <stdlib.h>
#include <stdio.h>
    int
    main()
{
    char *str, c;
    int i = 0, j = 1;
    str = (char *)malloc(sizeof(char));
    printf("\nEnter string");
    while (c != '\n')
    {
        c = getc(stdin);
        j++;
        str = (char *)realloc(str, j * sizeof(char));
        str[i] = c;
        i++;
    }
    str[i] = '\0';
    printf("\n the string is : %s", str);
    free(str);
    return 0;
}
/////////////////////////////////////////////////////////////////////////////
2. Write a program to ask the user to input a number of data values he would like to
    enter then create an array dynamically to accommodate the data values.Now take
        the input from the user and display the average of data values.
#include <stdio.h>
#include <stdlib.h>
    int
    main()
{
    int i, sum = 0;
    int size, *ptr;
    printf("\nEnter size of array.");
    scanf("%d", &size);
    ptr = (int *)calloc(size, sizeof(int));

    if (ptr == NULL)
    {
        printf("\nMemory allocattion faild.");
    }

    printf("\nEnter element in array.");
    for (i = 0; i < size; i++)
    {
        scanf("%d", (ptr + i));
    }

    for (i = 0; i < size; i++)
    {
        sum = sum + *(ptr + i);
    }
    printf("Average of element is : %d", sum / size);
    free(ptr);
}
//////////////////////////////////////////////////////////////////////////////
3. Write a program to calculate the sum of n numbers entered by the user using malloc
    and free.
#include <stdio.h>
#include <stdlib.h>
    int
    main()
{
    int *ptr, size, i, j = 1, sum = 0;
    printf("\nsize of array .");
    scanf("%d", &size);

    ptr = (int *)malloc(size * sizeof(int));

    if (ptr == NULL)
    {
        printf("\nMemory allocation faild.");
        return 0;
    }

    printf("\nEnter element .");

    for (i = 0; i < size; i++)
    {
        j++;
        ptr = (int *)realloc(ptr, j * sizeof(int));
        scanf("%d", ptr + i);
    }
    ptr[i] = '\0';

    for (i = 0; i < size; i++)
    {
        sum = sum + *(ptr + i);
    }
    printf("sum is %d", sum);
    free(ptr);
}
//////////////////////////////////////////////////////////////////////////
4. Write a program to input and print text using dynamic memory allocation.
#include <stdio.h>
#include <stdlib.h>
    int
    main()
{
    int i = 0, j = 1;
    char *str, c;
    str = (char *)malloc(sizeof(char));

    if (str == NULL)
    {
        printf("Memory is not allocated .");
    }

    printf("\nEnter string .");
    while (c != '\n')
    {
        c = getc(stdin);
        j++;
        str = realloc(str, j * sizeof(char));
        str[i] = c;
        i++;
    }
    str[i] = '\0';
    for (i = 0; str[i]; i++)
        printf("%c", str[i]);
    return 0;
    free(str);
}
/////////////////////////////////////////////////////////////////////////
5. Write a program to read a one dimensional array, print sum of all elements along with
inputted array elements using dynamic memory allocation.
#include <stdio.h>
#include <stdlib.h>
                                                    int
                                                    main()
{
    int *ptr;
    int n, i, sum = 0;
    printf("\nEnter size of array .");
    scanf("%d", &n);
    ptr = (int *)calloc(n, sizeof(int));

    if (ptr == NULL)
    {
        printf("Memory is not allocated .");
        return 0;
    }

    printf("\nEnter array element .");
    for (i = 0; i < n; i++)
    {
        scanf("%d", ptr + i);
    }

    for (i = 0; i < n; i++)
    {
        sum = sum + *(ptr + i);
    }
    printf("sum of all element of array=%d", sum);
    free(ptr);
    return 0;
}
///////////////////////////////////////////////////////////////////////
6. Write a program in C to find the largest element using Dynamic Memory Allocation.
#include <stdio.h>
#include <stdlib.h>
    int
    main()
{
    int *ptr, min = 0;
    int n, i, j = 0;
    printf("\nEnter size of array .");
    scanf("%d", &n);
    ptr = (int *)malloc(sizeof(int));

    if (ptr == NULL)
    {
        printf("Memory is not allocated .");
        return 0;
    }
    printf("\nEnter array element .");
    for (i = 0; i < n; i++)
    {
        j++;
        ptr = (int *)realloc(ptr, j * sizeof(int));
        scanf("%d", ptr + i);
    }
    ptr[i] = '\0';

    for (i = 0; i < n; i++)
    {
        if (min < *(ptr + i))
        {
            min = *(ptr + i);
        }
    }

    printf("largest  element in array is: %d", min);
    return 0;
}
/////////////////////////////////////////////////////////////////
7. Write a program to demonstrate memory leak in C.
#include <stdio.h>
#include <stdlib.h>
    int
    main()
{
    int *ptr;
    printf("after allocation memory size.");
    ptr = (int *)malloc(sizeof(int));
    printf("ptr address is %d", *ptr);

    ptr = NULL;
    printf("\nafter free memory size.");
    printf("ptr address is %d", *ptr);
    return 0;
}
////////////////////////////////////////////////////////////////////
8. Write a program to demonstrate dangling pointers in C.
#include <stdio.h>
#include <stdlib.h>
    int
    main()
{
    int *ptr;
    ptr = (int *)malloc(sizeof(int));
    *ptr = 10;
    printf("\nbefore free pointer value.");
    printf("\nptr address is %d\n%d", *ptr, ptr);
    free(ptr);
    printf("\nafter free pointer value .");
    printf("\nptr address is %d", ptr);
    return 0;
}
///////////////////////////////////////////////////////////////////////////////
9. Write a program to allocate memory dynamically of the size in bytes entered by the
    user.Also handle the case when memory allocation is failed.int
    main()
{
    int *ptr;
    int n, i, sum = 0;
    printf("\nEnter size of array .");
    scanf("%d", &n);
    ptr = (int *)calloc(n, sizeof(int));

    if (ptr == NULL)
    {
        printf("Memory is not allocated .");
        return 0;
    }

    printf("\nEnter array element .");
    for (i = 0; i < n; i++)
    {
        scanf("%d", ptr + i);
    }

    for (i = 0; i < n; i++)
    {
        sum = sum + *(ptr + i);
    }
    printf("sum of all element of array=%d", sum);
    free(ptr);
    return 0;
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
10. Find out the maximum and minimum from an array using dynamic memory allocation
    in C.
    abhi pura nahi hai
#include <stdio.h>
#include <stdlib.h>
    int
    main()
{
    int *ptr, size;
    int min, max, i;
    printf("Enter size of array .");
    scanf("%d", &size);
    ptr = calloc(size, sizeof(int));

    printf("\nEnter array element .");
    for (i = 0; i < size; i++)
    {
        scanf("%d", ptr + i);
    }

    for (i = 0; i < size; i++)
    {
        if (min > *(ptr + i))
            min = *(ptr + i);
        if (max < *(ptr + i))
            max = *(ptr + i);
    }
    printf("\nmaximum element in array is : %d", max);
    printf("\nminmum element in array is : %d", min);
    free(ptr);
}
