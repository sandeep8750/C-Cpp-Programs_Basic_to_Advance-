
//1. Write a C++ program to demonstrate the addition of multiple types of data using
//generic functions or templates.

#include<iostream>
using namespace std;

template <class t,class B>
t addition(t a , B b)
{
    return (a+b);
}

int main()
{
    //Addition function called first for integer type values
   cout<< addition<int,int >(10,20)<<endl;
   //Addition function called for float type values
   cout<<addition<float,int > (10.24,20.30);
   return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////
2. Write a C++ Program to find Largest among two numbers using function template.
#include<iostream>
using namespace std;


template <class t,class u>
t  is_greater(u a,u b)
{
    return (a>b)?a:b;
}

int main()
{

    cout<<is_greater<int ,int  >(10,20)<<endl;
    cout<<is_greater<float  ,float >(10.10,20.0)<<endl;
    cout<<is_greater<char, char >('a','s')<<endl;
    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////
//3. Write a C++ Program to find Largest among three elemet  using template.
#include<iostream>
using namespace std;


template <class T>
T is_greater(T x, T y ,T z)
{
  return (x>y)?(x>z)?x:z:(y>z)?y:z;
}

int main()
{
    cout<<"this program is about find greater number among of three number \n\n";
    cout<<is_greater<int>(10,50,30)<<endl;
    cout<<is_greater<float >(10.10,20.0,30.0)<<endl;
    cout<<is_greater<char>('a','s','z')<<endl;
    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////
//4. Write a C++ Program to Swap data using function template.
#include<iostream>
using namespace std;

template<typename t>
void isswap(t &a,t &b)
{
    t temp;
    temp=b;
    b=a;
    a=temp;
}

int main()
{

    int a=10,b=20;
    double x=11.22,y=22.11;
    char s='s',a='a';
     cout<<"Enter two number to swap \n";
    cin>>a>>b;
    isswap<int>(a,b);
    cout<<a<<endl<<b;
     cout<<"Enter two number to swap \n";
    cin>>x>>y;

    isswap<double>(x,y);
    cout<<x<<endl<<y;

    cout<<"Enter two char to swap \n";
    cin>>s>>a
     isswap<double>(s,a);
    cout<<s<<endl<<a;

    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////
// 5. Write a C++ Program to Add two numbers using function template.
#include<iostream>
using namespace std;

template <typename t>

t addition(t a,t b)
{
    return a+b;
}

int main()
{
   cout<< addition<float>(10.11,20.22);

   cout<< addition<int >(10,20);
    return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////
//6. Write a C++ Program to find Sum of Array using function template.
#include<iostream>
using namespace std;

template <class I>
 I addition_of_Array(I *a,int &length)
{
    I sum=0;
    for(int i=0;i<length;i++)
    {
        sum=sum+a[i];
    }
    return sum;
}

int main()
{
    int n,a[100];
    float ar[100];
    cout<<"Enter array size ";
    cin>>n;

    cout<<"Enter array element ";
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }

   cout<< addition_of_Array<int>(a,n);

   cout<<"Enter array element for float ";
    for(int i=0;i<n;i++)
    {
        cin>>ar[i];
    }

   cout<< addition_of_Array<float>(ar,n);
   return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////
//7. Write a C++ Program of Templated class derived from Non-templated class.
#include<iostream>
#define pi 3.14
using namespace std;

class Shape
{
    string shape;
public :
    Shape()
    {

    }
    Shape(string s)
    {
        shape=s;
    }
    void set_shape(string s)
    {
        shape=s;
    }
    string get_shape()
    {
        return shape;
    }
};

template <typename t>
class circle :public Shape
{
    t x;
    t y;
    t z;
public :
    circle(t x,t y,t z,string s):Shape(s)
    {
        this->x=x;
        this->y=y;
        this->z=z;
    }
    circle(t x, t y, t z):Shape()
    {
        this->x=x;
        this->y=y;
        this->z=z;
    }
    circle(t z)
    {
        this->z=z;
    }
    circle()
    {

    }
    t area()
    {
        return (pi*z*z);
    }
};

int main()
{
    circle <float>obj={0,0,5.5,"circle"};
    cout<<obj.area()<<endl;
    cout<<obj.get_shape()<<endl;

    circle <int>obj1(0,0,4);
    cout<<obj1.area()<<endl;
    return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////
7. Sort an array in ascending order using sort() function in C++ STL
#include<iostream>
#include<algorithm>
#include<array>
using namespace std;

int main()
{
    array<int ,5> arr[]={10,50,30,20,400};

    sort(arr,arr+3);

    for(int i=0;i<5;i++)
    {
        cout<<arr[i]<<" ";
    }
    return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////
//8. Sort an array in descending order using sort() function in C++ STL
#include<iostream>
#include<algorithm>
#include<array>
using namespace std;

int main()
{
  int arr[]={10,50,30,20,400};

  int size=sizeof(arr)/sizeof(int);

    sort(arr,arr+size);

    for(int i=size-1;i>=0;i--)
    {
        cout<<arr[i]<<" ";
    }
    return 0;
}

//8. Sort an array in descending order using sort() function in C++ STL
#include<iostream>
#include<algorithm>
#include<array>
using namespace std;

int main()
{
  int arr[]={10,50,30,20,400};

  int size=sizeof(arr)/sizeof(int);

    sort(arr,arr+size,greater<>());

    for(int i=0;i<size;i++)
    {
        cout<<arr[i]<<" ";
    }
    return 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////
//9. C++ program to find the integers which come an odd number of times in an array using C++ STL.
#include<iostream>
#include<array>
using namespace std;

int oddInteger(array<int ,7> );
int main()
{
    array<int,7> arr={1,2,3,2,1,5,3};
    int result=oddInteger(arr);
    cout<<"odd number is "<<result <<endl;
    return 0;
}

int oddInteger(array<int,7> arr)
{
    int result=0;
    for(int i=0;i<arr.size();i++)
    {
        result=result^arr[i];
    }
    return (result);
}
////////////////////////////////////////////////////////////////////////////////////////////////////
